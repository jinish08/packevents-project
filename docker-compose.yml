version: '3.8'
services:
  kafka:
    image: obsidiandynamics/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    # The healthcheck has been removed

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: packevents
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  user-service:
    build: ./user-service # Corrected name
    ports:
      - "8080:8080"
    environment: # <-- ADD THIS SECTION
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/packevents
    depends_on:
      - postgres
    restart: unless-stopped

  booking-service:
    build: ./booking-service
    ports:
      - "8081:8081"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/packevents
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped

  payment-service:
    build: ./payment-service
    ports:
      - "8082:8082"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/packevents
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped

  notification-service:
    build: ./notification-service
    ports:
      - "8083:8083"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - kafka
    restart: unless-stopped

  admin-service:
    build: ./admin-service
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/packevents
    depends_on:
      - postgres
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - user-service
      - booking-service
      - payment-service
      - notification-service

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  grafana-storage: {}
  postgres-data: {}